package jp.feb19.utils{	import flash.display.Stage;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;		/**	 * ...	 * @author Nobuhiro Takahashi	 */	public class IdleTimer extends EventDispatcher	{		public static const ACTIVE:String = "idleTimer_active";		public static const IDLE:String = "idleTimer_idle";		public static const MOUSE_IN:String = "idleTime_mouseIn";		public static const MOUSE_OUT:String = "idleTime_mouseOut";				public var _stage:Stage;		public var _tick:uint = 3000;		public var _timer:Timer;				private var _isMouseIn:Boolean = true;				public function IdleTimer(stage:Stage, tick:uint = 3000)		{			_stage = stage;			_tick = tick;		}				public function start():void		{			_stage.addEventListener(Event.ENTER_FRAME, enterFrameHandler);			_stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);			_stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);						active();		}		public function stop():void		{			if (_timer)			{				_timer.addEventListener(TimerEvent.TIMER, timerHandler);				_timer.stop();				_timer = null;			}			_stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);			_stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			_stage.addEventListener(Event.ENTER_FRAME, enterFrameHandler);		}				private function active():void		{			if (_timer)			{				_timer.removeEventListener(TimerEvent.TIMER, timerHandler);				_timer.stop();				_timer = null;			}						_timer = new Timer(_tick, 1);			_timer.addEventListener(TimerEvent.TIMER, timerHandler);			_timer.start();					}		private function idle():void		{			if (_timer)			{				_timer.removeEventListener(TimerEvent.TIMER, timerHandler);				_timer.stop();				_timer = null;			}						dispatchEvent(new Event(IDLE));		}		private function timerHandler(event:TimerEvent):void		{			idle();		}		private function enterFrameHandler(event:Event):void		{			//trace(_stage.mouseX, _stage.mouseY);			if(_isMouseIn)			{				if(_stage.mouseX > 0  && _stage.mouseX < _stage.stage.stageWidth && _stage.mouseY > 0 && _stage.mouseY < _stage.stage.stageHeight)				{					//trace("inin");				}				else				{					_isMouseIn = false;					dispatchEvent(new Event(MOUSE_OUT));				}			}			else			{				if(_stage.mouseX > 0  && _stage.mouseX < _stage.stage.stageWidth && _stage.mouseY > 0 && _stage.mouseY < _stage.stage.stageHeight)				{					_isMouseIn = true;					dispatchEvent(new Event(MOUSE_IN));				}				else				{									}			}		}		private function mouseMoveHandler(event:MouseEvent):void		{			dispatchEvent(new Event(ACTIVE));						active();		}		private function keyDownHandler(event:KeyboardEvent):void		{			dispatchEvent(new Event(ACTIVE));						active();		}	}	}